{"meta":{"title":"icy","subtitle":null,"description":"艾茜的小站","author":"icy","url":"http://example.com"},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"client/index.html","permalink":"http://example.com/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"bangumi/index.html","permalink":"http://example.com/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"comment/index.html","permalink":"http://example.com/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"donate/index.html","permalink":"http://example.com/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"lab/index.html","permalink":"http://example.com/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"rss/index.html","permalink":"http://example.com/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"music/index.html","permalink":"http://example.com/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"video/index.html","permalink":"http://example.com/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"http://example.com/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"}],"posts":[{"title":"OSReview","slug":"OSReview","date":"2022-06-27T02:42:33.000Z","updated":"2022-07-03T14:04:17.543Z","comments":true,"path":"2022/06/27/OSReview/","link":"","permalink":"http://example.com/2022/06/27/OSReview/","excerpt":"","text":"操作系统复习 死锁 定义：一组进程中的每个进程均等待此组进程中其他进程所占有的、因而永远无法得到的资源，这种现象称为进程死锁，简称死锁。 类型： 竞争资源 进程间通信 其他 条件：资源独占、不可剥夺、保持申请、循环等待 资源独占：一个资源在同一时刻只能被分配给一个进程。如果某一进程申请某一资源，而该资源正在被另外的某一进程所占有，则申请者需要等待，直到占有者释放该资源。 不可剥夺：资源申请者不能强行地从资源占有者手中夺取资源，即资源只能由其占有者在使用完后自愿地释放。 保持申请：进程在占有部分资源后还可以申请新的资源，而且在申请新资源的时候并不释放它已经占有的资源。 循环等待：存在一个进程等待序列{p~1~,p~2~,…,p~n~}，其中p~1~等待p~2~所占有的某一资源，p~2~等待p~3~占有的某一资源……p~n~等待p~1~所占有的某一资源。 死锁的处理 不让死锁发生 静态：死锁预防 所谓静态，是指对于进程有关资源的活动按某种协议加以限制，如果所有进程都遵守此协议，即可保证不发生死锁 预先分配策略： 采用预先分配策略：进程在运行前一次性地向系统申请它所需要的全部资源。如果系统当前不能满足进程的全部资源请求，则不分配资源，此进程暂不投入运行。如果系统当前能够满足进程的全部资源请求，则一次性地将所申请的资源全部分配给申请进程。因破坏了保持申请这一死锁的必要条件，故不会有死锁发生。 预先分配策略的缺点： 资源利用率低。进程运行前申请所需全部资源，其中部分资源可能仅一段时间使用 进程在运行前可能并不知道它所需要的全部资源。 有序分配策略： 事先将所有资源类完全排序，规定进程必须按照资源编号由小到大的次序申请资源。使用这种预防死锁策略时，应仔细考虑资源类的编号。为了提高资源利用率，通常按照大多数进程使用资源的次序来给资源类编号，即先使用者排在前面，后使用者排在后面。 有序分配策略的缺点： 给资源类一个合理的编号比较困难 按编号申请资源增加了资源使用者(进程)的负担 如果有进程违反了申请规定，仍有可能死锁 为了保证按编号申请的次序，暂不需要的资源也可能需要提前申请，增加了进程对于资源的占有时间 动态：死锁避免 所谓动态，是指对于进程有关资源的申请命令加以实时检测，拒绝不安全的资源请求命令，以保证死锁不会发生 安全状态是没有死锁的状态，因为当任意进程需要的资源数量超过当前系统剩余的资源量，它可以等待直到所有进程都执行完并释放它们所有的资源后获得它所需要的全部资源。不安全状态不一定是死锁状态。 避免死锁的银行家算法： n：进程的总数； m：资源类的总数 Available[m]：当前各类资源中资源实例的数量 Claim[n][m]：每个进程所需各类资源的资源实例最大量 Allocation[n][m]：每个进程占有各资源类中的资源实例的数量，初始为0 Need[n][m]：每个进程尚需各个资源类中的资源实例的数量 Request[n][m]：每个进程当前申请各个资源类中的资源实例的数量 Work[m]：工作变量，记录可用资源 Finish[n]：工作变量，记录进程是否可以执行完 银行家算法——资源分配算法 如果Request≤Need，转第2步，否则带错返回(申请资源量超过所声明/需最大资源需求量) 如果Request≤Available，转第3步，否则无法满足本次申请，进程等待 假设系统分配资源，则： Available = Available - Request； Allocation = Allocation + Request； Need = Need - Request； 如果上述分配导致的新状态是安全的，转第5步，否则取消分配(注意第3步是假设,实际4作为条件在前)，进程等待 确认分配，进程继续执行 银行家算法——安全检测算法 Work=Available；Finish=false； 寻找满足 Finish=false &amp;&amp; Need≤Work 的进程，若不存在，转第4步 Work = Work + Allocation[i];Finish[i] = true;(i为第2步满足条件的进程)转第2步 如果对于所有进程，都有Finish=true，则系统处于安全状态，否则系统处于不安全状态 银行家算法的时间复杂度为O(mn^2^)，借助图论可将其复杂度降至O(n^2^)。 银行家算法的缺陷： 进程运行前需要申明所需资源的最大量，这对进程是一个负担，有时是困难的 n个进程要事先已知，实际应用中进程是动态创建动态撤销的 运行银行家算法进行安全检测所花费的时间代价比较大 检测出死锁并消除 动态死锁检测策略 以及 动态死锁恢复策略 死锁检测算法 Available[m]：当前各个资源类中空闲资源实例的个数 Allocation[n][m]：当前每个进程占有各个资源类实例的个数 Request[n][m]：当前每个进程申请各个资源类中资源实例的个数 步骤： int Work[m],Finish[n]; Work=Available 对于所有进程i，如果Allocation[i]≠0，则Finish[i]=false，否则Finish[i]=0; 寻找满足条件的进程i： Finish[i]=false; Request[i]≤Work;若无满足条件的进程，转第4步 Work = Work + Allocation[i];Finish[i] = true;转第2步 若存在进程i未执行完，则系统处于死锁状态，且该进程i参与了死锁 该算法的时间复杂度与银行家算法基本相同。 死锁检测时刻： 进程等待时检测：在此时刻进行检测，相当于在死锁形成时即被发现。但此时系统的开销很大，与避免死锁的算法相近 定时检测：为减小死锁检测带来的系统开销，可以采取每隔一段时间进行一次检测的策略。此时，一次死锁检测可能发现多个死锁 资源利用率降低时检测：为了减少盲目性，当死锁导致系统中可运行进程数降低，处理器利用率下降时检测。 死锁检测算法 系统重新启动 终止进程： 一次性撤销所有参与死锁的进程。处理简单，代价较高(不占资源的进程的撤销是不必要的) 逐一撤销参与死锁的进程。按照某种算法选择一个参与死锁的进程，撤销并回收其所占有的全部资源，判断是否还存在死锁，如果是，继续选择淘汰下一个进程，如此重复直至死锁接触 剥夺资源： 逐步剥夺。一次剥夺死锁进程所占有的一个或一组资源，如果死锁尚未解除则继续剥夺，直至死锁解除 一次剥夺。一次性剥夺死锁进程所占有的全部资源 进程回退让参与死锁的进程回退到以前没有发生死锁的某个时刻，并该时刻继续执行，希望进程交叉执行时不再死锁。实现开销很大。 鸵鸟算法：当死锁真正发生且影响系统正常运行时，手动干预——重新启动。该策略是目前实际系统采用最多的一种策略，UNIX和Windows等商用系统都采用这种做法。进程定义：进程是具有一定独立功能的程序关于一个数据集合的一次运行活动。关于进程的解释都强调程序的执行，也就是进程的动态特性，这是进程与程序之间本质上的差异。二者的联系和差别：1. 联系： 程序是构成进程的组成部分之一，进程包括进程控制块与程序。一个进程存在的目的就是执行其所对应的程序。如果没有程序，进程就失去了其存在的意义2. 差别： - 程序是静态的，而进程是动态的 - 程序可以写在纸上或在某种存储介质上长期保存，而进程具有生存周期，创建后存在，撤销后消亡 - 一个程序可以对应多个进程，但是一个进程只能对应一个程序进程的特性：1. 并发性：可以与其他进程一道在宏观上同时向前推进2. 动态性：进程是执行中的程序；进程是动态产生、动态消亡的；进程的生存周期内，其状态处于经常性的动态变化之中3. 独立性：进程是调度的基本单位，它可以获得处理器并参与并发执行4. 交互性：进程在运行过程中可能会与其他进程发生直接或间接的相互作用5. 异步性：每个进程都以相对独立、不可预知的速度向前推进6. 结构性：每个进程都有一个进程控制块进程状态及状态转换 进程的状态 运行态：进程占有处理器资源，正在运行。单处理器系统中任一时刻只能有一个进程处于此种状态。 就绪态：进程本身具备运行条件，但是由于处理器的数量少于可运行进程的数量，暂未投入运行，即相当于等待处理器资源。 等待态：也称为挂起态、阻塞态、睡眠态。进程本身不具备运行条件，即使分给其处理器也不能运行。进程正在等待某一事件的发生，如等待某一资源被释放，等待与该进程相关的数据传输的完成信号等。 运行、就绪、等待是进程最基本的3种状态。对于一个具体的系统来说，为了实现某种设计目标，进程状态的数量可能多于3个。 状态转换 进程状态转换是由操作系统完成的，对用户是透明的。一个进程在其生存周期内会经过多次状态转换，这体现了进程的动态性和并发性。 进程控制块 定义：进程控制块是标志进程存在的数据结构，其中包含系统对进程进行管理所需要的全部信息。 一般系统规模越大、功能越强，其进程控制块中的信息的数量就越多。一般操作系统中进程控制块所包含的项目：进程标识、用户标识、进程状态、调度参数、现场信息、家族联系、程序地址、当前打开文件、消息队列指针、资源使用情况、进程队列指针。 进程标识：一个整数，称为进程号，用于区分不同的进程。一个进程号与唯一的用户号相对应。 用户标识：一个整数，称为用户号，用于区分不同的用户。一个用户号可以与多个进程号相对应。 进程状态：在就绪、运行、等待之间动态变化 调度参数：用于确定下一个运行的进程 现场信息：用于保存进程暂停的断点信息，包括通用寄存器、地址映射寄存器、PSW、PC 家庭联系：记载本进程的父进程 程序地址：记载进程所对应程序的存储位置和所占存储空间大小，具体内容与存储管理方式有关 当前打开文件：用于记载进程正在使用的文件，通过它与内存文件管理表目建立联系，通过该表可以找到保存在外存中的文件 消息队列指针：指向 本进程从其他进程接收到的消息所构成的消息队列的链头 资源使用情况：记载该进程生存期间所使用的系统资源和使用时间，用于记账 进程队列指针：用于构建进程控制块队列，它是系统管理进程所需要的 进程的创建、撤销、汇聚 进程创建spid=fork()创建子进程的主要工作： 建立一个进程控制块，并对其内容进行初始化 为该进程分配必要的存储空间，并加载所要执行的程序 将进程控制块送入就绪队列 进程撤销exit(status)完成使命的进程需要终止自己并告知操作系统，操作系统进行善后处理(收集进程状态信息、通知其父进程等)，之后收回进程所占有的所有资源(打开文件、内存等)，最后撤销其进程控制块地址越界、非法指令、来自用户/父进程的kill信号等原因也可能导致进程的非正常终止。非正常终止的进程也将进入操作系统进行善后处理。 进程汇聚在Java中，父线程创建子线程后，可以执行join系统调用，等待子线程结束并与其进行汇聚，之后父线程继续执行 摘自《计算机操作系统教程》，仅供个人复习使用，未完待续…","categories":[],"tags":[],"keywords":[]},{"title":"踩坑记录","slug":"踩坑记录","date":"2022-06-12T01:42:13.000Z","updated":"2022-06-15T08:59:10.491Z","comments":true,"path":"2022/06/12/踩坑记录/","link":"","permalink":"http://example.com/2022/06/12/踩坑记录/","excerpt":"","text":"踩坑记录最近在频繁更换hexo主题，消耗了不少时间，不过也开了眼界，多了一点经历。在记录这次踩坑之前，先发誓到今年年底闲下来之前不再折腾hexo主题和其他内容了，之前所想的Android端的Blog项目也暂停不做。 这次更换Sakura主题后遇到的问题基本有两点： hexo g和hexo s时疯狂报错，本地预览都加载不出来解决措施：参考作者和众多Sakura配置教程所说直接将下载的压缩包解压到根目录替换的做法（我行不通），我直接先删除所有自己之前所有的文件（只把文章备份了下来）然后填满Sakura主题的文件。 部署到GitHub上白屏起初遇到这个问题时很懵的，还以为只是网络不畅通，直到尝试科学上网之后仍然白屏，采取搜索相关问题，发现index.html确实变成了空文件。 解决措施其实不难：换了低版本的nodejs。但是我没有第一时间决定这么做，毕竟之前怎么换主题也没有因为版本问题出岔子 （好像Termux那次经历暗示了我什么），这次只能说吃一堑长一智了。 刚刚又解决了上一篇Blog中markdown分级标题只显示第一个的问题，换html格式改了之后显示完全了…. 当天傍晚更上一个blog时遇到的坑（涨姿势）：blog的根目录是source，根据图片文件与source的关系写好路径就可以啦(●’◡’●) 持续学习下去呀！","categories":[],"tags":[],"keywords":[]},{"title":"Computer Network Review","slug":"ComputerNetworkReview","date":"2022-06-09T15:08:59.000Z","updated":"2022-06-20T03:22:34.191Z","comments":true,"path":"2022/06/09/ComputerNetworkReview/","link":"","permalink":"http://example.com/2022/06/09/ComputerNetworkReview/","excerpt":"","text":"计网复习 P.S.长文预警 应用层 应用程序体系结构由应用程序研发者设计，规定了如何在各种端系统上组织该应用程序。两种主流体系结构：客户-服务器体系结构、对等（P2P）体系结构。 客户-服务器体系结构中，配备大量主机的数据中心常用于创建强大的虚拟服务器。对等（P2P）体系结构最引人入胜的特性之一是它们的自拓展性运行在多个端系统上的程序是通过进程进行通信的，在两个不同端系统上的进程通过跨越计算机网络交换报文而相互通信。进程寻址需要主机的地址(IP地址)和在目的主机中指定接收进程的标识符(端口号)套接字是同一台主机内应用层与运输层之间的接口。套接字又称API。开发者通过套接字对于运输层的控制仅限于：①选择运输层协议；②设定几个参数(如最大缓存和最大报文段长度)无论TCP还是UDP都没有提供任何加密机制，因此因特网界研制了TCP加强版：安全套接字层(SSL)应用层协议 定义了运行在不同端系统上的应用程序进程如何相互传递报文——·交换的报文类型·各种报文类型的语法·字段的语义·对报文进行响应的规则HTTPWeb页面是由对象构成的。多数Web页面含有一个HTML基本文件。Web浏览器实现了HTTP的客户端，Web服务器实现了HTTP的服务器端(常见的有Apache，微软互联网信息服务器)HTTP定义了Web客户向Web服务器请求Web页面的方式，以及服务器向客户发送Web页面的方式。HTTP使用TCP作为它的支撑运输协议。HTTP服务器并不保存关于客户的任何信息(但cookie保存,cookie由客户端的浏览器生成并交由Web服务器的数据库记录)，因此HTTP协议是一个无状态协议。HTTP既能够使用非持续连接，也能够使用持续连接，这在HTTP中报文的Connection首部行中得以体现。非持续连接的缺点：①必须为每一个请求的对象建立和维护一个全新的连接（客户和服务器均要分配TCP缓冲区和保持TCP变量，这为服务器带来了严重的负担）；②每一个对象经受两倍RTT(往返时间)的交付时延Web缓存器也叫代理服务器，是能够代表初始Web服务器来满足HTTP请求的网络实体。Web服务器拥有自己的磁盘存储空间，并在其中存储最近请求过的对象的副本。Web缓存器既是客户又是服务器。Web缓存器通常由ISP购买并安装。部署Web缓存器①可以大大减少对客户请求的响应时间，特别是当客户与初始服务器之间的瓶颈带宽远低于客户与Web缓存器之间的瓶颈带宽时；②能够大大减少一个机构的接入链路到因特网的通信量（通过减少通信量，可不必急于增加带宽，因此降低了费用）。条件GET方法作为HTTP协议中的一种机制，允许Web缓存器证实它的对象是最新的。SMTP、POP3、IMAP因特网电子邮件系统主要组成部分为：用户代理、邮件服务器、简单邮件传输协议(SMTP)。示意：用户代理–SMTP/HTTP–&gt;邮件服务器–SMTP–&gt;邮件服务器–POP3/IMAP/HTTP–&gt;用户代理DNS域名系统(DNS) 的主要任务是进行主机名到IP地址转换的服务。DNS是①一个由分层DNS服务器实现的分布式数据库②一个使得主机能够查询分布式数据库的应用层协议。DNS运行在UDP协议之上，使用53号端口。DNS的分布式设计方案:根DNS服务器：全世界400多个，由13个组织管理。根名字服务器提供顶级域服务器的IP地址顶级域(DNS)服务器：如com、org、net、edu和gov，又如uk、cn。顶级域服务器提供权威DNS服务器的IP地址权威DNS服务器：在因特网上具有公共可访问主机的每个组织机构必须提供公共可访问的DNS记录，一个组织机构的权威DNS服务器收藏这些IP地址记录。一种方式是自己实现，另一种方式是付费使用。 除此之外，还有本地DNS服务器。每个ISP都有一台本地DNS服务器，用户可通过访问端系统的网络状态窗口确定自身的本地DNS服务器IP地址（通常在同一局域网内）。 请求主机对本地DNS服务器发出的查询是递归查询，本地DNS服务器向根DNS服务器、顶级域服务器、权威DNS服务器发出的查询是迭代查询。 为了改善时延性能并减少在因特网上到处传输的DNS报文数量，DNS广泛采用了DNS缓存技术。 运输层 运输层协议为运行在不同主机上的应用进程之间提供了逻辑通信功能。将主机间交付扩展到进程间交付被称为运输层的多路复用与多路分解。IP被称为不可靠服务，其服务模型是尽力而交付。UDP与IP是同一类型服务，而TCP不但提供可靠数据传输，还提供拥塞控制服务。将运输层报文段中的数据交付到正确的套接字的工作称为多路分解在源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息（可用于分解）从而生成报文段，然后将报文段传递到网络层，所有这些工作称为多路复用 UDP 用户数据报协议、无连接传输 UDP首部仅由源端口号、目的端口号、长度、校验和四部分每部分各2字节组成，共8字节。 端到端原则：因为某种功能必须基于端到端实现——与在较高级别提供这些功能的代价相比，在较低级别上设置的功能可能是冗余的或几乎没有价值的。 可靠数据传输 基于重传机制的可靠数据传输协议称为自动重传请求协议。 初始的停止等待协议包括了差错检测、肯定确认和否定确认。该类协议解决了比特差错问题。 比特交替协议使用的技术包括差错检测、肯定确认、否定确认、序号、超时重传等，其本身仍是一个停等协议，功能正确但性能极低(拥有非常低的发送方利用率)。故采用流水线方法。 滑动窗口协议又被称为回退N步协议，N被称为窗口长度，参见讲解视频。 TCP 传输控制协议、面向传输的协议、全双工、点对点 最大报文长度MSS(通常1460字节)：通常根据最初确定的由本地发送主机发送的最大链路层帧长度MTU(通常1500字节)来决定。 TCP报文段结构如下图： 一个报文段的序号是该报文段首字节的字节流序号。接收方填充到报文段中的确认号是接收方期望从发送方收到的下一字节的序号。TCP只确认流中至第一个丢失字节为止的字节，因此被称为提供累计确认。快速重传：一旦收到3个冗余ACK(重复确认)，TCP便不等待超时重传，而立即执行重传。 TCP为它的应用程序提供了流量控制服务以消除发送方使接收方溢出缓存的可能性。TCP发送方因为IP网络的拥塞而被遏制时发送方的控制被称为拥塞控制。（注意区分拥塞控制和流量控制服务）TCP通过让发送方维护一个称为接收窗口的变量来提供流量控制。 快速回顾TCP拥塞控制算法: 网络层 数据平面——转发 转发是指将分组从一个输入链路接口转移到适当的输出链路接口的路由器的本地动作。 网络服务模型定义了分组在发送端与接收端之间的端到端运输特性： 确保交付 具有时延上界的确保交付 有序分组交付 确保最小带宽 安全性 但需注意网络层这种单一的服务是尽力而为服务。 某些分组交换机称为链路层交换机，基于链路层帧中的字段值做出转发决定，是链路层设备；其他分组交换机称为路由器，基于网络层数据报中的首部字段值做出转发决定，是网络层设备。 转发可分为基于目的地转发和通用转发。 当有多个匹配时，路由器使用最长前缀匹配规则，即在表中寻找最长的匹配项，并向与最长前缀匹配相关联的链路接口转发分组。 交换分为 经内存交换、经总线交换、经互联网络交换。 一些常见的分组调度策略： 先进先出 优先权排队 当选择一个分组传输时，优先权排队规则将从队列为非空的最高优先权类中传输一个分组； 在同一个优先权类的分组之间的选择通常以先进先出方式完成； 在非抢占式优先权排队规则下，一旦分组开始传输，就不能被打断 循环和加权公平排队 在循环排队规则下，分组像使用优先权排队那样被分类，但类之间不存在严格的服务优先权，循环调度器在这些类之间轮流提供服务； 一个所谓的保持工作排队规则在有分组排队等待传输时，不允许链路保持空闲，当寻找给定类的分组但是没有找到时，保持工作的循环规则将立即检查循环队列中的下一个类； 加权公平排队和循环排队的不同之处在于，每个类在任何时间间隔内可能收到不同数量的服务，该排队按权重使各分组仍能分配到公平的带宽。加权公平排队也遵循保持工作排队规则。 IPv4 IPv4数据报格式： 版本(版本号)：这4bit规定了数据报的IP协议版本，用以使路由器确定如何解释IP数据报的剩余部分首部长度：IPv4数据报因为包含选项字段，故该字段用以指出IP数据报中载荷(运输层报文段)实际开始的地方。大多数IP数据报不包含选项，IP一般具有20字节长的首部服务类型：区分不同的IP数据报(如要求低时延、高吞吐量、可靠性的数据报)，例如实时数据报(IP电话)与非实时流量(FTP)数据报长度：指IP数据报的总长度(首部+数据)，该字段所体现的IP数据报能容纳的最大长度受限于以太网帧的载荷字段(该字段16bit,能容许最大65535字节,而数据报很少有超过1500字节)标识、标志、片偏移：与IP分片有关，新版IPv6不允许路由器对分组分片寿命：TTL(Time-To-Live)用以确保数据报不会永远在网络中循环——每当一台路由器处理数据报时，数据报该字段-1，当减至0时，该数据报必须被丢弃协议：指高层协议，指示了IP数据报的数据部分应该交给哪个特定的运输层协议首部校验和：路由器对每个收到的IP数据报检验首部校验和，并且因TTL字段的改变，路由器重新计算校验和并更改该字段。该字段是影响性能的字段数据：该字段不仅能承载运输层报文，还能用以承载ICMP报文 关于IPv4的数据分片：一个链路层所能承载的最大数据量叫最大传送单元(MTU)，链路层的MTU严格限制着IP数据报的长度，而由于不同的链路层协议具有不同的MTU，因此需在端系统中对数据报进行分片并在接收时重新组装。 生成一个数据报时，发送主机为该数据报设置源和目的地址的同时贴上标识号，发送主机为它发送的每个数据报的标识号+1 为了让目的主机相信收到了初始数据报的最后一个片，除了最后一个片的标志比特设为0外，其他所有片的标志比特均被设为1 为了让目的主机确认是否丢失了一个片(且能按正确的顺序重新组装片)，使用偏移字段指定该片应放在初始IP数据报的哪个位置 寻址 动态主机配置协议(DHCP) 具有将主机连接进一个网络的网络相关方面的自动能力，又被称为即插即用协议或零配置协议。DHCP协议使某主机每次与网络连接时能得到 一个相同的IP地址/临时的IP地址，通常还包括它的子网掩码、第一跳路由器(网关)、本地DNS服务器。DHCP是一个客户-服务器协议。 DHCP工作的4步骤： 客户发送DHCP发现报文，使用广播地址255.255.255.0 并将本机地址设为0.0.0.0 DHCP服务器收到DHCP发现报文后，用DHCP提供报文响应，仍使用广播地址255.255.255.255(因为子网中可能存在多个DHCP服务器)，提供报文中包含有发现报文的事务ID、向客户推荐的IP地址、网络掩码以及IP地址租用期 客户发送DHCP请求报文以响应，回显配置的参数 服务器发送DHCP ACK报文以对请求报文响应，证实所要求的参数 网络地址转换(NAT)通过维护一张NAT转换表，利用NAT路由器的端口进行主机寻址，解决了IPv4地址枯竭的问题。 IPv6 IPv6数据报格式： 版本：该值为6(但IPv4该值不为4)流量类型：与IPv4的TOS字段类似流标签：20bit字段用于标识一条数据报的流，能够对一条流中的某些数据报给出优先权有效载荷长度：16bit无符号整数，表示跟在定长40字节首部后面的字节数量下一个首部：高层协议TCP/UPD等，与IPv4首部中协议字段相同的值跳限制：TTL，与IPv4协议中字段类似 IPv6不再保留分片/重新组装、首部校验和、选项。IPv6兼容IPv4，但IPv4设备无法处理IPv6数据报 从IPv4向IPv6迁移的一种方式是建隧道：将IPv6报文作为IPv4数据报中的数据，以经过IPv6站点中间的IPv4站点 控制平面——路由选择 路由算法的分类： 集中式/分散式 集中式路由选择算法 e.g.链路状态(LS)算法 分散式路由选择算法 e.g.距离向量(DV)算法 静态/动态 静态路由选择算法 动态路由选择算法 负载 负载敏感算法 负载迟钝算法 链路状态路由选择算法即Dijkstra算法；距离向量路由选择算法可理解为是一种动态规划。详见B站upeye·patch关于两个算法的讲解。二者对比： 报文复杂性：LS算法的开销是O(N*E)，DV算法仅在新的链路开销导致与该链路相连节点的最低开销路径发生改变时，才传播已改变的链路开销 收敛速度：LS算法为O(N²)，DV算法收敛较慢，且会遇到路由选择环路和无穷计数的问题 健壮性：LS &gt; DV 在相同自治系统(AS)中的路由器都运行相同的路由选择算法并且有彼此的信息。在一个自治系统内运行的路由选择算法叫作自治系统内部路由选择协议。 开放最短路优先(OSPF) OSPF是一种链路状态协议，使用洪泛链路状态信息和Dijkstra最低开销路径算法。 使用OSPF，一台路由器构建了一幅关于整个自治系统的完整拓扑图，每台路由器在本地运行Dijkstra的最短路径算法，各条链路开销都是网络管理员配置的。使用OSPF时，路由器向自治系统内所有其他路由器广播路由选择信息，而不仅仅是向其相邻路由器广播。即使链路状态未发生变化，也会周期性地广播链路状态。 OSPF的优点：安全、允许多条相同开销的路径、对单播与多播路由选择的综合支持、支持在单个AS中的层次结构 边界网关协议(BGP) 在因特网中，所有的AS运行相同的AS间路由选择协议，称为边界网关协议。 热土豆路由选择：选择具有最小最低开销的网关——尽可能将分组送出AS，而不担心AS外部到达目的地的余下部分的开销。 路由器选择算法： 路由被指派一个本地偏好值作为其属性之一。具有最高本地偏好值的路由将被选择 从余下的路由中(所有具有相同的最高本地偏好值)，选择具有最短AS-PATH的路由。如果该规则是路由选择的唯一规则，则BGP将使用距离向量算法决定路劲，距离测度使用AS跳的跳数而不是路由器跳的跳数 从余下的路由中(所有具有相同的最高本地偏好值和相同的AS-PATH长度)，使用热土豆路由选择 如果仍留下多条路由，使用BGP标识去选择路由 ICMP：因特网控制报文协议 链路层 链路层提供的服务： 成帧 链路接入(媒体访问控制/MAC 协议) 可靠交付 差错检测和纠正 链路层的主体部分是在网络适配器中实现的，网络适配器也称网络接口卡。 差错检测和纠正技术 奇偶校验 在偶校验中，发送方添加一个附加的比特，选择它的值，使发送的一组比特加上这一比特中1的总数是偶数。 单个比特差错可使用二维奇偶校验方案进行纠正。且检验比特本身的单个比特差错也是可检测和可纠正的。二维奇偶校验能检测但不能纠正一个分组中两个比特差错的任意组合。 接收方检验和纠正差错的能力被称为前向纠错。 检验和方法 如IP数据报、TCP数据报、UDP数据报中的检验和字段。 循环冗余检测 循环冗余检测(CRC)编码也称多项式编码。详见视频。 多路访问链路和协议 点对点链路由链路一端的单个发送方和链路另一端的单个接收方组成。基于这样的链路设计的协议有点对点协议(PPP)和高级数据链路控制协议(HDLC)。 广播链路能让多个发送和接收节点都连接到相同的、单一的、共享的广播信道上。 多路访问问题：如何协调多个发送和接收节点对一个共享广播信道的访问。 信道划分协议 时分多路复用(TDM) 频分多路复用(FDM) 码分多址(CDMA) 随机接入协议 载波侦听多路访问(CSMA) 和 具有碰撞检测的CSMA(CSMA/CD) 载波侦听：“说话之前先听”碰撞检测：“如果与他人同时开始说话，停止说话” 步骤如下： 适配器从网络层获得一条数据报，准备链路层帧，并将其放入帧适配器缓存中 如果适配器侦听到信道空闲，它开始传输帧；如果适配器侦听到信道正忙，它将等待，直到侦听到没有信号能量时才开始传输帧 在传输过程中，适配器监视来自其他使用该广播信道的适配器的信号能量的存在 如果适配器传输整个帧而未检测到来自其他适配器的信号能量，该适配器就完成了该帧；如果适配器在传输时检测到来自其他适配器的信号能量，它中止传输(即它停止了传输帧) 中止传输后，适配器等待一个随机时间量，然后返回步骤2 随机时间量采用二进制指数后退算法：当传输一个给定帧时，在该帧经历了一连串的n次碰撞后，节点随机从[0,1,2,…,2^n^-1]中选择一个K值。因此，当一个帧经历的碰撞越多，K的选择间隔越大 轮流协议 轮询协议 令牌传递协议 地址解析协议ARP 以太网 集线器：是一种物理层设备，作用于各个比特而不是作用于帧。以太网的前同步码：8字节，前7字节是10101010，后1字节是10101011 链路层交换机 过滤是决定一个帧应该转发到某个接口还是应该将其丢弃的交换机功能转发是决定一个帧应该被导向哪个接口，并把该帧移动到那些接口的交换机功能上述两个功能依赖于交换机表完成。 交换机是自学习的，即交换机是即插即用设备。 虚拟局域网可以处理缺乏流量隔离、交换机的无效使用、管理用户等问题。 摘自黑皮书《计算机网络：自顶向下方法》，仅供个人复习使用","categories":[],"tags":[],"keywords":[]},{"title":"Blog On Android","slug":"BlogOnAndroid","date":"2022-06-08T09:58:36.000Z","updated":"2022-06-15T09:05:58.327Z","comments":true,"path":"2022/06/08/BlogOnAndroid/","link":"","permalink":"http://example.com/2022/06/08/BlogOnAndroid/","excerpt":"","text":"Blog On Android在家比在校要更好的一点是自己变得更加随心所欲了。这两天忽然想起手机上还留着Termux，于是心血来潮，何不把hexo搭建在上面试一试呢？最终是成功了，这里记录一下注意事项吧： 0、首先要下载安装Termux，这里留下一个我安装的版本：Termux(密码：cv4z)。安装之后的一些基本配置可参考国光的教程。 1、安装需要的包12345678# 安装nodejs长期支持版本pkg install nodejs-lts# 安装gitpkg install git# 安装hexonpm install hexo-cli -g# 安装hexo d命令npm install hexo-deployer-git --save 2、选择合适的路径存放项目文件 注意：在未root过的Android机上无法通过自带的文件管理直接访问termux默认的家目录 12# 输入该命令创建若干映射以便于通过文件管理直接访问termux-setup-storage 输入以上命令后，会在termux的home目录中生成storage，进入storage后使用ls -l命令和查看到具体的映射路径： 12345678[~/storage]$ ls -ltotal 0lrwxrwxrwx 1 u0_a481 u0_a481 26 May 16 19:48 dcim -&gt; /storage/emulated/0/DCIMlrwxrwxrwx 1 u0_a481 u0_a481 30 May 16 19:48 downloads -&gt; /storage/emulated/0/Downloadlrwxrwxrwx 1 u0_a481 u0_a481 30 May 16 19:48 movies -&gt; /storage/emulated/0/Movieslrwxrwxrwx 1 u0_a481 u0_a481 30 May 16 19:48 music -&gt; /storage/emulated/0/Musiclrwxrwxrwx 1 u0_a481 u0_a481 30 May 16 19:48 pictures -&gt; /storage/emulated/0/Pictureslrwxrwxrwx 1 u0_a481 u0_a481 22 May 16 19:48 shared -&gt; /storage/emulated/0 选择好合适的位置后即可进行初始化（也可以迁移已有的项目文件至该目录） 12# filename可选，可填写完整路径，生成的文件夹默认在当前目录下hexo init filename 3、将hexo从本地部署到远端仓库： 这里主要参考文章，简要步骤即：新建仓库、git配置user.name和user.email、生成ssh密钥、在GitHub中添加新ssh密钥、修改本地_config.yml文件。 4、以上完成后即可熟练使用hexo三板斧开心地写Blog了 123456789# 新建一篇文章(xxx为.md文件名)hexo new xxx# 以下为\"三板斧\"：hexo cleanhexo g hexo d# 分别是清除缓存、生成静态文章、远端部署文章# 本地预览:hexo s 以上步骤我都亲自在手机上实践了一番，但由于我用的也是本Blog的远端仓库，所以再次编辑这篇Blog的时候因为没做PC与手机间的文件同步，也没去仓库拉代码，导致原本从手机上发出的Blog被刷没了，将来会在别的仓库重建1个Blog并将地址贴在此处。 在手机上写Blog体验目前还不是很好，比如不能方便地使用在PC端可实时预览的vscode编辑器，比如执行hexo g和d命令时耗时极长。但无论如何，这实现了写Blog自由（doge保命 本篇主要参考B站up主frienkie的专栏指路，在此十分感谢！","categories":[],"tags":[],"keywords":[]},{"title":"About Me","slug":"AboutMe","date":"2022-06-05T15:35:49.000Z","updated":"2022-06-15T09:04:26.695Z","comments":true,"path":"2022/06/05/AboutMe/","link":"","permalink":"http://example.com/2022/06/05/AboutMe/","excerpt":"","text":"AboutI once participated in IOI for 3 months when I studied in my high school. I had to admit that it took a big impact on me —— At least, I started to develop a relatively strong interest in programming. As to why mentioning about that experience of IOI, part of the reason is that the coach and head teacher at that time gave me inspiration for the future.It seems that I never know about myself (so why you write this About😅) . Observing my classmates around me in college, most of them may not that outstanding. I am an ordinary person like everyone else. On the contrary, if we observe my classmates in high school, I am that “bad” students who was not outstanding. What does these mean? I mean that my opinion of myself seems to follow the change of the enviroment. 3 or 4 years are too short. Maybe that’s why I or we get confused when facing difficulties.From the content of my blog, you can easily guess that my major may be computer science. Congratulations! However, computer science is only my academy. I major in cyberspace security. That’s my choice after I passed the exam of changing major successfully. Like most of my classmates, I have a headache with the hardware. So I “run” away from Iot and CS —— on the other hand, I can say I don’t have more options than in the past any way, though it seems a great choice for my future.For many subjective or objective reasons, I didn’t do great jobs on my courses, major (I mean ctf competitions, I’ve never even participated because I have almost no experience in this field) or researches😭(why? For example, I allocated part of my time to the orchestra and games). It seems that I am the one who wants to recline(lie flat) but ends up being somewhat involute. In a sence, above is my evaluation of myself.The text above is not well organized, it’s almost a pile of rubbish🥺. There will be ample time ahead. May we still have the ability to focus and do what we need to do.___what? why writing in English? You may know the reason from penultimate paragraph","categories":[],"tags":[],"keywords":[]},{"title":"Record Of Qt Develop","slug":"RecordOfQtDevelop","date":"2022-06-05T08:28:33.000Z","updated":"2022-06-15T09:07:16.593Z","comments":true,"path":"2022/06/05/RecordOfQtDevelop/","link":"","permalink":"http://example.com/2022/06/05/RecordOfQtDevelop/","excerpt":"","text":"Qt开发记录关于此次开发，算是大一下半年在通信工程学院时C语言课老师最后布置的不算作业的一次任务吧。时间久远，只记得当时是看着B站一个Qt的教程，借鉴着知乎中一篇文章中的代码，在win7的一个老电脑上写了将近4周，到最后还有一点bug。 其实是很简单的连连看游戏的开发而已，没有写出什么值得看的代码，只不过作为一次使用Qt进行的开发，我对此印象还是较深刻的 （可能因为当时群里算我只有3个人去做了？🤭）。 那么代码肯定是展示不了了，早没了，不过当时在Qt上打包发布了，所以成果还是留着滴！遗憾的是，由于当时开发时候在win7平台，我还设置了固定的窗口大小，导致现在在较新的win10、win11上运行时，窗口尺寸着实是太小了点。","categories":[],"tags":[],"keywords":[]},{"title":"Record Of Android Develop","slug":"RecordOfAndroidDevelop","date":"2022-06-03T05:55:17.000Z","updated":"2022-06-15T09:06:35.100Z","comments":true,"path":"2022/06/03/RecordOfAndroidDevelop/","link":"","permalink":"http://example.com/2022/06/03/RecordOfAndroidDevelop/","excerpt":"","text":"Android课大作业记录前段时间（5.28）Android软件开发结课了，作为少有的一个实打实要求出成果的实践选修课，而且老师对此还很认真的全程参与了答辩，因此决定在这儿记上一笔，同时算作本Blog里第一篇正经article。——————————————————————————————————-大作业的内容是完成1个app的开发，功能包括注册、登录、拍照、选择图片、根据图片显示的溶液（可能）的色彩与对应的浓度值拟合1个函数模型以预测未知浓度的溶液、模型可视化、分享等基础功能。最先做的是注册和登录，可能是考虑这是app最开始被展示的功能吧。界面可以很容易的从网上找到其他人写的，于是“多快好省”地搬过来用了。这里遇到的小问题是需要一个后端来记录注册过的账号和密码。AS开发当燃不能再像学C语言做C课设那样简单地存到程序里或者txt文档中了，而之前课上教给的利用eclipse和mysql5作后端的实现方法又过于繁琐，并且需要另开eclipse和mysql5程序保持运行以支持功能的正常使用。受室友麻同学启发，最后采用的是SQLite，相关教程在网上也有很多，于是注册和登录功能顺利实现了。然后做的是拍照图片和选择图片。这一部分也是直接使用了别人做好的轮子，尽管某节课上教过了如何调用相机（不过没教如何选择图库中的图片）。既然是“抄的”（CV大法好），这里也不展开详说了 （其实是我忘了）。最后搞的是拟合函数这里。关于这里，在需求文档中提到的有rgb值、灰度、线性关系、取对数等关键词。为此先用Java写了个脚本，用来提取图片里每个像素的rgb值。之前对灰度值不是很熟悉，在吴同学的启发下选取了指定区域的像素点计算了灰度值。于是将给的图片的灰度值和浓度值放在一起，先是用excel生成散点图再添加趋势线看看效果，很令人失望——线性关系肯定是别想，按照需求文档里推荐的取对数的效果也是很糟糕，而且显而易见的，由于图片少、质量差，想只根据数据得出误差小的函数是件很不现实的事情。在事情焦灼1天之后，终于在网上某在线拟合网站注意到了 “四参数方程”.由于其是用于获得免疫检测领域吸光度随抗原浓度变化的规律，某种程度上与此次大作业的需求相契合，更主要的是在那个在线拟合网站上和其他函数相比，这个函数拟合出来的效果更好。最终在网上找到了一段计算四参数的Java代码，可谓是本次大作业中最具价值的轮子了。最后，在胡同学的帮助下，解决了函数模型的可视化问题，具体和canvas有关，也是从网上寻找到的轮子。——————————————————————————————————-为人要低调，就不在此展示代码了。且本次大作业基本都是借鉴的他人的代码，本蒟蒻只是在不停地debug，让🚗跑起来 （当然只有轮子是不够的）。其实代码还是有的🤭","categories":[],"tags":[],"keywords":[]},{"title":"init","slug":"init","date":"2022-05-21T04:00:51.000Z","updated":"2022-06-15T09:05:07.387Z","comments":true,"path":"2022/05/21/init/","link":"","permalink":"http://example.com/2022/05/21/init/","excerpt":"","text":"Hello hexo","categories":[],"tags":[],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2022-05-21T02:28:19.000Z","updated":"2022-06-15T09:03:47.674Z","comments":true,"path":"2022/05/21/hello-world/","link":"","permalink":"http://example.com/2022/05/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}